/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hospitalmanagementsystem;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
/**
 *
 * @author Tanisha
 */
public class PatientMenu extends javax.swing.JFrame {
    private String patientId;
    Connection con;
    Statement st;
    PreparedStatement ps;
    ResultSet rs;
    /**
     * Creates new form PatientMenu
     */
    public PatientMenu(String patientId) {
        initComponents();
        this.patientId = patientId;
        
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            JOptionPane.showMessageDialog(this, "Driver Loaded!");

            try {
                con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@localhost:1521:XE",
                    "c##tani",
                    "HelloWorld2006"
                );
                JOptionPane.showMessageDialog(this, "Connected to Oracle database!");
            } catch (SQLException ex) {
                Logger.getLogger(PatientMenu.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PatientMenu.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void showDoctorDetails(String patientId) {
    try {
        String sql = "SELECT D.DoctorID, D.Name, D.Speciality " +
                     "FROM DOCTOR D " +
                     "JOIN PATIENT_DOCTOR PD ON D.DoctorID = PD.DoctorID " +
                     "WHERE PD.PatientID = ?";

        ps = con.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(patientId));

        rs = ps.executeQuery();

        if (rs.next()) {
            int docId = rs.getInt("DoctorID");
            String name = rs.getString("Name");
            String speciality = rs.getString("Speciality");

            // You can show this in a label or message box
            JOptionPane.showMessageDialog(this, 
                "Doctor ID: " + docId + "\nName: " + name + "\nSpeciality: " + speciality,
                "Assigned Doctor", 
                JOptionPane.INFORMATION_MESSAGE
            );
        } else {
            JOptionPane.showMessageDialog(this, 
                "No doctor assigned for this patient.", 
                "Info", 
                JOptionPane.WARNING_MESSAGE
            );
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, 
            "Error fetching doctor info.", 
            "Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
}
    
    public void showTreatmentDetails(String patientId) {
    try {
        
        // Prepare SQL query that joins the two tables
        String sql = "SELECT T.TreatmentID, T.TreatmentType, T.Cost " +
                     "FROM TREATMENT T " +
                     "JOIN PATIENT_TREATMENT PT ON T.TreatmentID = PT.TreatmentID " +
                     "WHERE PT.PatientID = ?";
                     
        ps = con.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(patientId)); // Convert patientId to an integer
        
        rs = ps.executeQuery();
        
        // Use a StringBuilder to accumulate the treatment details.
        StringBuilder details = new StringBuilder();
        while (rs.next()) {
            details.append("Treatment ID: ").append(rs.getInt("TreatmentID")).append("\n");
            details.append("Type: ").append(rs.getString("TreatmentType")).append("\n");
            details.append("Cost: ").append(rs.getInt("Cost")).append("\n");
            details.append("----------------------\n");
        }
        
        // Check if any records were found
        if (details.length() == 0) {
            JOptionPane.showMessageDialog(this, "No treatments found for Patient ID: " + patientId);
        } else {
            JOptionPane.showMessageDialog(this, details.toString(), "Treatment Details", JOptionPane.INFORMATION_MESSAGE);
        }
        

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching treatment details: " + e.getMessage(), 
                                      "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    public void showMedicationDetails(String patientId) {
    try {
        
        // SQL to join MEDICATION and PATIENT_MEDICATION for a given PatientID
        String sql = "SELECT M.MedID, M.Name, M.Dosage, M.SideEffects " +
                     "FROM MEDICATION M " +
                     "JOIN PATIENT_MEDICATION PM ON M.MedID = PM.MedID " +
                     "WHERE PM.PatientID = ?";

        ps = con.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(patientId));

        rs = ps.executeQuery();

        StringBuilder details = new StringBuilder();
        while (rs.next()) {
            details.append("Medication ID: ").append(rs.getInt("MedID")).append("\n");
            details.append("Name: ").append(rs.getString("Name")).append("\n");
            details.append("Dosage: ").append(rs.getInt("Dosage")).append(" mg\n");
            details.append("Side Effects: ").append(rs.getString("SideEffects")).append("\n");
            details.append("----------------------\n");
        }

        if (details.length() == 0) {
            JOptionPane.showMessageDialog(this, "No medications found for Patient ID: " + patientId);
        } else {
            JOptionPane.showMessageDialog(this, details.toString(), "Medication Details", JOptionPane.INFORMATION_MESSAGE);
        }


    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving medication details: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}



    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("Patient Menu");

        jButton1.setText("View Doctor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Treatment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("View Medication");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(149, 149, 149))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(jButton4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addComponent(jButton1)
                .addGap(38, 38, 38)
                .addComponent(jButton2)
                .addGap(40, 40, 40)
                .addComponent(jButton3)
                .addGap(31, 31, 31)
                .addComponent(jButton4)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        showTreatmentDetails(patientId);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        PatientLogin pl= new PatientLogin();
        pl.setVisible(true);
        
        this.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        showDoctorDetails(patientId);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        showMedicationDetails(patientId);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(PatientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(PatientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(PatientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(PatientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new PatientMenu().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
